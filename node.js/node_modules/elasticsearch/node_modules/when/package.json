{
  "name": "when",
  "version": "2.6.0",
  "description": "A lightweight Promises/A+ and when() implementation, plus other async goodies.",
  "keywords": [
    "Promises/A+",
    "promises-aplus",
    "promise",
    "promises",
    "deferred",
    "deferreds",
    "when",
    "async",
    "asynchronous",
    "cujo"
  ],
  "homepage": "http://cujojs.com",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/cujojs/when"
  },
  "bugs": {
    "url": "https://github.com/cujojs/when/issues"
  },
  "maintainers": [
    {
      "name": "Brian Cavalier",
      "url": "http://hovercraftstudios.com"
    },
    {
      "name": "John Hann",
      "url": "http://unscriptable.com"
    }
  ],
  "contributors": [
    {
      "name": "Brian Cavalier",
      "url": "http://hovercraftstudios.com"
    },
    {
      "name": "John Hann",
      "url": "http://unscriptable.com"
    },
    {
      "name": "Scott Andrews"
    }
  ],
  "devDependencies": {
    "curl": "https://github.com/cujojs/curl/tarball/0.7.3",
    "test-support": "~0.3",
    "promises-aplus-tests": "~2",
    "benchmark": "~1",
    "microtime": "~0"
  },
  "main": "when",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js --reporter spec",
    "ci": "npm test && sauceme",
    "tunnel": "sauceme -m",
    "start": "buster static -e browser",
    "benchmark": "node benchmark/promise && node benchmark/map"
  },
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n# What's New?\n\n### 2.6.0\n\n* New [`promise.done`](docs/api.md#done) allows consuming the ultimate value at the end of a promise chain while ensuring that any errors are thrown to the host environment so you get loud stack traces.\n* `when/node/function` [`bindCallback`](docs/api.md#nodefn-bindcallback) and [`liftCallback`](docs/api.md#nodefn-liftcallback) now behave more like standard node-style APIs in that they allow exceptions to propagate to the host environment for loud stack traces.\n\n### 2.5.1\n\n* `ensure` now ignores non-functions, [like `then` does](http://promisesaplus.com/#point-25), for consistency. (#207)\n\n### 2.5.0\n\n* [Promises/A+ 1.1](http://promisesaplus.com) compliant.  Passes version 2.0.0 of the [Promises/A+ test suite](https://github.com/promises-aplus/promises-tests).\n\n### 2.4.1\n\n* New `MutationObserver` scheduler further reduces \"time-to-first-handler\" in modern browsers. (#198)\n\t* Also, this works around a horrible IE10 bug (desktop and mobile) that renders `setImmediate`, `MessageChannel`, and `postMessage` unusable as fast task schedulers.  Many thanks to @plaa and @calvinmetcalf for their help in discovering the problem and working out a solution. (#197)\n\n### 2.4.0\n\n* Experimental support for [vert.x 2.x](http://vertx.io). Should now run in vert.x >= 1.1.0.\n* New `when.isPromiseLike` as the more accurately-named synonym for `when.isPromise`.\n* **DEPRECATED**: `when.isPromise`. It can only tell you that something is \"promise-like\" (aka \"thenable\") anyway. Use the new, more accurately-named `when.isPromiseLike` instead.\n* Fix for promise monitor reporting extra unhandled rejections for `when.all` and `when.map`.\n\n### 2.3.0\n\n* New [`promise.tap`](docs/api.md#tap) for adding side effects to a promise chain.\n* New `MessageChannel` scheduler reduces \"time-to-first\" handler, in environments that support it.\n* Performance optimizations for promise resolution.\n* Internal architecture improvements to pave the way for when.js 3.0.0.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n",
  "readmeFilename": "README.md",
  "_id": "when@2.6.0",
  "_from": "when@~2.6.0"
}
